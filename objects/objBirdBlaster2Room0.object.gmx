<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBirdBlaster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_xscale = 1;
image_speed = 0;
vspeed_ = 0;
hspeed_ = 0;
grav = 0.1;
beingheld = 0;
alarm[0] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animations 2

image_index = 0;
alarm[0] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animations and shooting the pod

image_index = 2;
podShot = instance_create(x-(8*image_xscale),y-4,objPodShot);

if(collision_rectangle(x+100,y+48,x-180,y-98, objRoboIdle, false, true))
{
    if(!audio_is_playing(snd_bird))
    {
        //audio_play_sound_at(snd_bird, objBirdBlaster.x, objBirdBlaster.y, 0, 100, 100, 1, false, 1);
        audio_play_sound(snd_bird,17,false);
    }
}

if(image_xscale&gt;0)
    podShot.direction = 180;
if(image_xscale&lt;0)
    podShot.direction = 360;

alarm[2]=20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///animations1

image_index = 1;
alarm[1] = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scrInterest();
/*
if(objRoboIdle.key_use_held &amp;&amp; !held)
{
    held = 1;
}

if(objRoboIdle.key_use_held &amp;&amp; held)
{
    held = 0;
}*/

if(place_meeting(x,y,objRoboIdle) &amp;&amp; objRoboIdle.key_use &amp;&amp; !beingheld)
{
    beingheld = 1;
}
else{
if(place_meeting(x,y,objRoboIdle) &amp;&amp; objRoboIdle.key_use &amp;&amp; beingheld)
{
    beingheld = 0;
}
}






if(beingheld)
{
    if(instance_exists(objRoboIdle))
    {
    x = objRoboIdle.x;
    y = objRoboIdle.y-15;
    image_xscale = -objRoboIdle.image_xscale;
    }
}


else{

vspeed_+=grav;

if (place_meeting(x+hspeed_,y,par_wall))
{



    yPlus = 0;
    while(place_meeting(x+hspeed_,y-yPlus,par_wall) &amp;&amp; yPlus &lt;= abs(1*hspeed_)){
        yPlus +=1;
    }
    if(place_meeting(x+hspeed_, y-yPlus,par_wall)){
        while(!place_meeting(x+sign(hspeed_),y,par_wall)){
            x += sign(hspeed_);
        }
        hspeed_ = 0;
    }
    else{
        y -= yPlus;
    }

}



if (place_meeting(x,y+vspeed_,par_corner) || place_meeting(x,y+vspeed_,par_platforms) || place_meeting(x,y+vspeed_,par_bottomcorner))
{
    while(!place_meeting(x,y+sign(vspeed_),par_corner) &amp;&amp; !place_meeting(x,y+sign(vspeed_),par_platforms))
    {
        y += sign(vspeed_);
    }
    if (sign(vspeed_) == 1)
    {
        vspeed_ = 0;
    }
}

y+=vspeed_;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
