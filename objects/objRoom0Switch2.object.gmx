<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSwitch</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
image_index = 0;
state = 0;
mode = 0;
on = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//down
if(rightbridge.image_angle &gt; 0 &amp;&amp; on &amp;&amp; !state)
{
    rightbridge.image_angle-=2;
    alarm[0] = 1;
}

//up
if(rightbridge.image_angle &lt; 90 &amp;&amp; on &amp;&amp; state)
{
    rightbridge.image_angle+=2;

    alarm[0] = 1;
}

//down
if(leftbridge.image_angle &lt; 360 &amp;&amp; on &amp;&amp; !state)
{
    leftbridge.image_angle+=2;
    alarm[0] = 1;
}

//up
if(leftbridge.image_angle &gt; 270 &amp;&amp; on &amp;&amp; state)
{
    leftbridge.image_angle-=2;

    alarm[0] = 1;
}

//if bridge is down, on is set to off, and state is set to 0 (down)
if(leftbridge.image_angle &lt;= 270 &amp;&amp; rightbridge.image_angle &gt;= 90)
{
    //global.activeCamerax = objRoboIdle.x;
    //global.activeCameray = objRoboIdle.y;
    global.activeCamera = objRoboIdle;
    on = 0;
    state = 0;
}

//if bridge is up, on is set to off, and state is set to 1 (up)
if(rightbridge.image_angle == 0 &amp;&amp; leftbridge.image_angle == 360)
{
    //global.activeCamerax = objRoboIdle.x;
    //global.activeCameray = objRoboIdle.y;
    global.activeCamera = objRoboIdle;
    on = 0;
    state = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scrInterest();

if(place_meeting(x,y,objRoboIdle))
{
    if(objRoboIdle.key_use)
    {
        if(!audio_is_playing(snd_switch) &amp;&amp; on == 0)
        {
            audio_play_sound(snd_switch,15,false);
        }
        global.activeCamera = leftbridge;
        //mode = 1;
        on = 1;
        image_index++;
        if(image_index&gt;1) image_index = 0;
        alarm[0] = 1;
    }
    
    
    
    /*if(objRoboIdle.key_use &amp;&amp; mode == 1)
    {
        if(!audio_is_playing(snd_switch))
        {
            audio_play_sound(snd_switch,15,false);
        }
        global.activeCamera = leftbridge;
        mode = 0;
        on = 0;
        alarm[0] = 1;
    }*/
    
    
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
